this is a C port of the cube calculator. it's mainly intended to be used in [[https://github.com/Francesco149/cubecalc-ui][cubecalc-ui]] but it does a decent job at proving a C api to calculate cubing probabilities. it comes embedded with all the probability and line value data through a lot of code generation.

* how to run it
** method 1: manually install dependencies and run it
- have python3, numpy, mold, tinycc/clang/gcc installed
- run ~./build.sh~ . this uses tinycc by default but you can compile with gcc or clang by doing ~./build.sh gcc~ or ~./build.sh clang~

** method 2: nix dev shell (this is what I use)
this method is more reliable as the nix environment has exactly the specific versions of the tools that I used during development.

- if you're not on nixos, install the nix package manager https://nix.dev/tutorials/install-nix
- run ~nix develop~ and then ~./build.sh~
- this works on linux, macos, docker and windows WSL2

* navigating the codebase
if you're a developer and want to work on this calculator's code, here's an overview of where stuff is
- if you want to use cubecalc in your own C project, see ~main.c~ for example usage. ~cubecalc.c~ is also fairly documented in the top (header) part. you only need to copy ~utils.c~ and ~cubecalc.c~ to your project.
- ~generated.c~ is generated by ~gen.py~ and it contains all the line probabilities data. it is ~#include~ 'd by ~cubecalc.c~ and should not be touched. generating this stuff saves me a lot of headaches with storing/parsing/extracting probabilities data. it mostly feeds off the work I already did with the python proof of concept
- ~cubecalc.c~ is the core of the calculator code. it's a single-header library, though it does depend on ~utils.c~. this should be kept as simple and minimal as possible. any code that's not strictly tied to cube calculations should be generalized into a function for ~utils.c~
- ~utils.c~ is a swiss knife single header library with all the tools I've built over time. it's decently documented. it includes things like: DRY loop shorthands that I use all over the place, resizable arrays and DRY operations on them that I use to filter through lines, hashmaps, ability to pass custom allocators for a lot of these things, and more DRY macro magic
- the default compiler is tinycc for fast compilation. build with ~./build.sh rel~ to use clang with full optimizations
- for debugging, you can build with clang sanitizers with ~./build.sh san~
- when changing anything about code generation, use ~./build.sh gen~ to regenerate
